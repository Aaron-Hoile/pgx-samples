/*
* Compute the salience ranking of each node of the input graph,
* using a modified PageRank.
*
*  @param g                 the graph on which the salience rankings are computed
*  @param min_tolerance     value used to assess the convergence of the algorithm.
*                       Stop if the difference from the last iteration is less than this value
*  @param max_iter_count    maximum number of iterations to perform
*  @param damping           value that expresses the probability to move to a random node
*  @param entropy           edge property that contains the entropy of each edge
*  @param salience          node property that contains the computed salience of each node
*  @return                  the number of iterations
*/
procedure salience_ranking(graph G, double min_tolerance, int max_iter_count, double damping; edgeProperty<double> entropy,
    nodeProperty<double> salience): int {

    double difference = +INF;
    int iter_count = 0;
    long N = G.numNodes();

    G.salience = 1.0 / N;

    // Normalize the edge weights;
    double tot_entropy = sum (e: G.edges) {e.entropy};
    foreach (e: G.edges) {
        e.entropy = tot_entropy > 0 ? e.entropy / tot_entropy : 0;
    }

    // Store for each node the sum of the outgoing and ingoing entropies;
    nodeProp<double> entropy_sum;
    foreach (v: G.nodes) {
        v.entropy_sum = sum(out: v.outEdges) {out.entropy} + sum(in: v.inEdges) {in.entropy};
    }

    // Compute salience rankings iteratively, until the stopping criteria are met;
    while ((difference > min_tolerance) && (iter_count < max_iter_count)) {
        difference = 0.0;

        // Compute the salience ranking of each node;
        foreach (v: G.nodes) {
            // Probability to teleport to the current vertex;
            double teleport_score = (1 - damping) / N;

            // Score given by the ingoing edges;
            double in_sum = 0;
            foreach (e: v.inEdges) {
                node src = e.fromNode();
                // Ignore nodes with edge_weight_sum = 0;
                in_sum += src.entropy_sum > 0 ? e.entropy * src.salience / src.entropy_sum : 0;
            }

            // Score given by the outgoing edges;
            double out_sum = 0;
            foreach (e: v.outEdges) {
                node dest = e.toNode();
                // Ignore nodes with edge_weight_sum = 0;
                out_sum += dest.entropy_sum > 0 ? e.entropy * dest.salience / dest.entropy_sum : 0;
            }

            // Compute the current salience and assign it to the vertex;
            double new_salience = teleport_score + damping * (in_sum + out_sum);
            difference += |new_salience - v.salience|;
            v.salience <= new_salience;
        }

        iter_count++;
    }

    return iter_count;
}