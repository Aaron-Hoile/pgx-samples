/*
* Compute the pagerank score of each node of the input graph,
* interpreting the graph as undirected;
*
*  @param G                 the graph on which the pagerank scores are computed
*  @param min_tolerance     value used to assess the convergence of the algorithm.
*                       Stop if the difference from the last iteration is less than this value
*  @param max_iter_count    maximum number of iterations to perform
*  @param damping           value that expresses the probability to move to a random node
*  @return                  the number of iterations
*/
procedure pagerank_u(graph G, double min_tolerance, int max_iter_count, double damping; nodeProp<double> rank) : int {

  // Initialize local variables;
  double difference = +INF;
  int iter_count = 0;
  long N = G.numNodes();

  // Uniform initialization for pagerank scores;
  G.rank = 1 / N;

  // Store for each vertex the sum of the vertex degrees;
  nodeProp<double> degree_sum;
  foreach (v: G.nodes) {
    v.degree_sum = v.inDegree() + v.outDegree();
  }

  // Compute rankings iteratively, until the stopping criteria are met;
  while ((difference > min_tolerance) && (iter_count < max_iter_count)) {
    difference = 0.0;

    foreach (t: G.nodes) {
      // Probability to teleport to the current vertex;
      double teleport_score = (1 - damping) / N;

      // Score given by the ingoing edges;
      double in_sum = sum (w: t.inNbrs) {w.degree_sum > 0 ? w.rank / w.degree_sum : 0};

      // Score given by the outgoing edges;
      double out_sum = sum (w: t.outNbrs) {w.degree_sum > 0 ? w.rank / w.degree_sum : 0};

      // Compute the current pagerank and assign it to the vertex;
      double pagerank_val = teleport_score + damping * (in_sum + out_sum);
      difference += |pagerank_val - t.rank|;
      t.rank <= pagerank_val;
    }

    iter_count++;
  }

  return iter_count;
}
